name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests
      run: pnpm run test
    
    - name: Run type check
      run: pnpm run type-check
    
    - name: Run linting
      run: pnpm run lint
    
    - name: Build package
      run: pnpm run build
    
    - name: Update version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          echo "Using custom version: ${{ github.event.inputs.custom_version }}"
          node scripts/update-version.js set ${{ github.event.inputs.custom_version }}
        else
          echo "Incrementing version: ${{ github.event.inputs.version_type }}"
          node scripts/update-version.js ${{ github.event.inputs.version_type }}
        fi
        
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## ðŸš€ What's Changed" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> RELEASE_NOTES.md
          git log $LAST_TAG..HEAD --oneline --pretty="- %s (%h)" >> RELEASE_NOTES.md
        else
          echo "### All commits:" >> RELEASE_NOTES.md
          git log --oneline --pretty="- %s (%h)" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## ðŸ“¦ Installation" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo "npm install next-csrf-protect@$NEW_VERSION" >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## ðŸ”— Links" >> RELEASE_NOTES.md
        echo "- [NPM Package](https://www.npmjs.com/package/next-csrf-protect)" >> RELEASE_NOTES.md
        echo "- [Documentation](https://github.com/${{ github.repository }}#readme)" >> RELEASE_NOTES.md
    
    - name: Commit version bump
      run: |
        git add package.json
        git commit -m "chore: release v${{ env.NEW_VERSION }}"
        git tag "v${{ env.NEW_VERSION }}"
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: ${{ steps.version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: |
          dist/
          package.json
          README.md
          LICENSE
        retention-days: 30
    
    - name: Create summary
      run: |
        echo "## ðŸŽ‰ Release Created" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Prerelease:** ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Draft:** ${{ github.event.inputs.draft }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY