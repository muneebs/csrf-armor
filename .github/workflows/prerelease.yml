name: Prerelease

on:
  push:
    branches: [ develop, beta, alpha ]
  workflow_dispatch:
    inputs:
      prerelease_type:
        description: 'Prerelease type'
        required: true
        default: 'beta'
        type: choice
        options:
          - alpha
          - beta
          - rc
      increment:
        description: 'Version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests
      run: pnpm run test
    
    - name: Run type check
      run: pnpm run type-check
    
    - name: Build package
      run: pnpm run build
    
    - name: Determine prerelease type
      id: prerelease
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"
          INCREMENT="${{ github.event.inputs.increment }}"
        else
          case "${{ github.ref_name }}" in
            "develop")
              PRERELEASE_TYPE="beta"
              INCREMENT="patch"
              ;;
            "beta")
              PRERELEASE_TYPE="beta"
              INCREMENT="patch"
              ;;
            "alpha")
              PRERELEASE_TYPE="alpha"
              INCREMENT="patch"
              ;;
            *)
              PRERELEASE_TYPE="beta"
              INCREMENT="patch"
              ;;
          esac
        fi
        echo "type=$PRERELEASE_TYPE" >> $GITHUB_OUTPUT
        echo "increment=$INCREMENT" >> $GITHUB_OUTPUT
    
    - name: Update version for prerelease
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Remove any existing prerelease suffix
        BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*$//')
        
        # Increment base version
        node scripts/update-version.js set $BASE_VERSION
        node scripts/update-version.js ${{ steps.prerelease.outputs.increment }}
        
        # Get new base version
        NEW_BASE=$(node -p "require('./package.json').version")
        
        # Generate prerelease identifier
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=$(git rev-parse --short HEAD)
        PRERELEASE_ID="${{ steps.prerelease.outputs.type }}.${TIMESTAMP}.${SHORT_SHA}"
        
        # Create full prerelease version
        PRERELEASE_VERSION="${NEW_BASE}-${PRERELEASE_ID}"
        
        # Set the prerelease version
        node scripts/update-version.js set $PRERELEASE_VERSION
        
        echo "version=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "base_version=$NEW_BASE" >> $GITHUB_OUTPUT
    
    - name: Generate prerelease notes
      run: |
        echo "## 🚧 Prerelease Build" > PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        echo "⚠️ **This is a prerelease version and may contain bugs or incomplete features.**" >> PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        echo "### Build Information" >> PRERELEASE_NOTES.md
        echo "- **Type:** ${{ steps.prerelease.outputs.type }}" >> PRERELEASE_NOTES.md
        echo "- **Base Version:** ${{ steps.version.outputs.base_version }}" >> PRERELEASE_NOTES.md
        echo "- **Branch:** ${{ github.ref_name }}" >> PRERELEASE_NOTES.md
        echo "- **Commit:** ${{ github.sha }}" >> PRERELEASE_NOTES.md
        echo "- **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        echo "### Recent Changes" >> PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        
        # Get recent commits
        git log -10 --oneline --pretty="- %s (%h)" >> PRERELEASE_NOTES.md
        
        echo "" >> PRERELEASE_NOTES.md
        echo "### Installation" >> PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        echo '```bash' >> PRERELEASE_NOTES.md
        echo "npm install next-csrf-protect@${{ steps.version.outputs.version }}" >> PRERELEASE_NOTES.md
        echo '```' >> PRERELEASE_NOTES.md
        echo "" >> PRERELEASE_NOTES.md
        echo "### Testing" >> PRERELEASE_NOTES.md
        echo "Please test this prerelease thoroughly before using in production." >> PRERELEASE_NOTES.md
    
    - name: Create prerelease tag
      run: |
        git add package.json
        git commit -m "chore: prerelease v${{ steps.version.outputs.version }}"
        git tag "${{ steps.version.outputs.tag }}"
        git push origin ${{ github.ref_name }}
        git push origin "${{ steps.version.outputs.tag }}"
    
    - name: Create GitHub Prerelease
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: ${{ steps.version.outputs.tag }} (${{ steps.prerelease.outputs.type }})
        body_path: PRERELEASE_NOTES.md
        draft: false
        prerelease: true
    
    - name: Publish prerelease to NPM
      run: |
        echo "📦 Publishing prerelease: ${{ steps.version.outputs.version }}"
        pnpm publish --access public --tag ${{ steps.prerelease.outputs.type }} --no-git-checks
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create summary
      run: |
        echo "## 🚧 Prerelease Published" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type:** ${{ steps.prerelease.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **NPM Tag:** ${{ steps.prerelease.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Install Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "npm install next-csrf-protect@${{ steps.prerelease.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY