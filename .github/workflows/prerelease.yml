name: Prerelease

on:
  push:
    branches: [develop, beta, alpha]
  workflow_dispatch:
    inputs:
      snapshot_tag:
        description: 'Snapshot tag name'
        required: false
        default: 'snapshot'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests
      run: pnpm run test

    - name: Run type check
      run: pnpm run type-check

    - name: Run linting
      run: pnpm run lint:check

    - name: Build core package first
      run: pnpm --filter @csrf-armor/core run build

    - name: Build packages
      run: pnpm run build

    - name: Determine snapshot tag
      id: snapshot
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.snapshot_tag }}"
        else
          case "${{ github.ref_name }}" in
            "develop")
              TAG="dev"
              ;;
            "beta")
              TAG="beta"
              ;;
            "alpha")
              TAG="alpha"
              ;;
            *)
              TAG="snapshot"
              ;;
          esac
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Create snapshot release
      run: |
        # Create a snapshot release with changesets
        pnpm changeset version --snapshot ${{ steps.snapshot.outputs.tag }}
        pnpm changeset publish --tag ${{ steps.snapshot.outputs.tag }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Get published versions
      id: versions
      run: |
        echo "packages<<EOF" >> $GITHUB_OUTPUT
        find packages -name package.json -exec jq -r '"\(.name)@\(.version)"' {} \; >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create summary
      run: |
        echo "## ðŸš§ Snapshot Published" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ steps.snapshot.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.versions.outputs.packages }}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Install Commands" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Install with snapshot tag" >> $GITHUB_STEP_SUMMARY
        echo "npm install @csrf-armor/core@${{ steps.snapshot.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "npm install @csrf-armor/nextjs@${{ steps.snapshot.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY